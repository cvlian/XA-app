/* svr_bank.tbc
 *
 * 
 */

EXEC SQL INCLUDE svr_bank.h;

void access_account(TPSVCINFO *msg, FBUF *sndbuf, char* db_sid, char* conn_name, char* user_id)
{
	char tmp[128];
	char dbaname[16];
	char password[16];

	if (strcmp(db_sid, "bankA") == 0)
	{
		sprintf(dbaname, BANKA_DBA_NAME);
		sprintf(password, BANKA_DBA_PWD);
		sprintf(conn_name, "bankA");
	}
	else if (strcmp(db_sid, "bankB") == 0)
	{
		sprintf(dbaname, BANKB_DBA_NAME);
		sprintf(password, BANKB_DBA_PWD);
		sprintf(conn_name, "bankB");
	}
	else
	{
		sprintf(tmp, "[%s] Failed [Such bank name (%s) does not exist]", msg->name, db_sid);
		fbput(sndbuf, MESSAGE, tmp, 0);
		tpreturn( TPFAIL, 0, (char *)sndbuf, sizeof(sndbuf), 0 );
	}

	EXEC SQL CONNECT :dbaname IDENTIFIED BY :password AT :conn_name USING :db_sid;

	if (sqlca.sqlcode != SQLOK)
	{
		sprintf(tmp, "[%s] Failed [cannot access to %s DB (%s)]", msg->name, db_sid, sqlca.sqlerrm.sqlerrmc);
		fbput(sndbuf, MESSAGE, tmp, 0);
		tpreturn( TPFAIL, 0, (char *)sndbuf, sizeof(sndbuf), 0 );
	}

	int cnt;

	EXEC SQL AT :conn_name SELECT COUNT(*)
	INTO	:cnt
	FROM	balance
	WHERE	ID =: user_id;

	if (cnt == 0)
	{
		sprintf(tmp, "[%s] Failed [%s's account is not registered in %s]", msg->name, user_id, db_sid);
		fbput(sndbuf, MESSAGE, tmp, 0);
		tpreturn( TPFAIL, 0, (char *)sndbuf, sizeof(sndbuf), 0 );
	}
	else if (sqlca.sqlcode != SQLOK)
	{
		sprintf(tmp, "[%s] Failed [ID verification error (%s)]", msg->name, sqlca.sqlerrm.sqlerrmc);
		fbput(sndbuf, MESSAGE, tmp, 0);
		tpreturn( TPFAIL, 0, (char *)sndbuf, sizeof(sndbuf), 0 );
	}
}

DEPOSIT(TPSVCINFO *msg)
{
	int bal, v;
	char tmp[128];
	char user_id[16];
	char my_bank[16];
	char date[64];
	char conn_name[16];

	FBUF *rcvbuf, *sndbuf;
	rcvbuf=(FBUF *)tpalloc("FIELD", NULL, 0);
	sndbuf=(FBUF *)tpalloc("FIELD", NULL,0);

	fbget((FBUF *)(msg->data), MY_ID, user_id, 0);
	fbget((FBUF *)(msg->data), AMOUNT, (char *)&v, 0);
	fbget((FBUF *)(msg->data), MY_BANK, my_bank, 0);
	fbget((FBUF *)(msg->data), DATE, date, 0);

	access_account(msg, sndbuf, my_bank, conn_name, user_id);

	EXEC SQL AT :conn_name SELECT BALANCE
	INTO	:bal
	FROM	balance
	WHERE	ID =: user_id;

	bal += v;

	EXEC SQL AT :conn_name UPDATE balance
	SET	BALANCE = :bal
	WHERE   ID =: user_id;

	if (sqlca.sqlcode != SQLOK)
	{
		sprintf(tmp, "[%s] Failed [failed to update your account (%s)]", msg->name, sqlca.sqlerrm.sqlerrmc);
		fbput(sndbuf, MESSAGE, tmp, 0);
		tpreturn( TPFAIL, 0, (char *)sndbuf, sizeof(sndbuf), 0 );
	}

	EXEC SQL AT :conn_name 
	INSERT INTO history
	VALUES ('Deposit', :user_id, '-', :v, to_timestamp(:date, 'yyyy-mm-dd hh24:mi:ss'));

	if (sqlca.sqlcode != SQLOK)
	{
		sprintf(tmp, "[%s] Failed [History cannot be updated (%s)]", msg->name, sqlca.sqlerrm.sqlerrmc);
		fbput(sndbuf, MESSAGE, tmp, 0);
		tpreturn( TPFAIL, 0, (char *)sndbuf, sizeof(sndbuf), 0 );
	}

	EXEC SQL AT :conn_name COMMIT WORK RELEASE;

	sprintf(tmp, "[%s] Success [%s's account has been credited with %d (current balance = %d)]", msg->name, user_id, v, bal);
	fbput(sndbuf, MESSAGE, tmp, 0);

	tpreturn( TPSUCCESS, 0, (char *)sndbuf, sizeof(sndbuf), 0 );
}

WITHDRAW(TPSVCINFO *msg)
{
	int bal, v;
	char tmp[128];
	char user_id[16];
	char my_bank[16];
	char conn_name[16];
	char date[64];

	FBUF *rcvbuf, *sndbuf;
	rcvbuf=(FBUF *)tpalloc("FIELD", NULL, 0);
	sndbuf=(FBUF *)tpalloc("FIELD", NULL,0);

	fbget((FBUF *)(msg->data), MY_ID, user_id, 0);
	fbget((FBUF *)(msg->data), MY_BANK, my_bank, 0);
	fbget((FBUF *)(msg->data), AMOUNT, (char *)&v, 0);
	fbget((FBUF *)(msg->data), DATE, date, 0);

	access_account(msg, sndbuf, my_bank, conn_name, user_id);

	EXEC SQL AT :conn_name SELECT BALANCE
	INTO	:bal
	FROM	balance
	WHERE	ID =: user_id;

	if (bal < v)
	{
		sprintf(tmp, "[%s] Failed [%s's account cannot be overdrawn (current balance = %d)]", msg->name, user_id, bal);
		fbput(sndbuf, MESSAGE, tmp, 0);
		tpreturn( TPFAIL, 0, (char *)sndbuf, sizeof(sndbuf), 0 );
	}

	bal -= v;

	EXEC SQL AT :conn_name UPDATE balance
	SET	BALANCE = :bal
	WHERE   ID =: user_id;

	if (sqlca.sqlcode != SQLOK)
	{
		sprintf(tmp, "[%s] Failed [failed to update your account (%s)]", msg->name, sqlca.sqlerrm.sqlerrmc);
		fbput(sndbuf, MESSAGE, tmp, 0);
		tpreturn( TPFAIL, 0, (char *)sndbuf, sizeof(sndbuf), 0 );
	}

	EXEC SQL AT :conn_name 
	INSERT INTO history
	VALUES ('Withdrawal', :user_id, '-', :v, to_timestamp(:date, 'yyyy-mm-dd hh24:mi:ss'));

	if (sqlca.sqlcode != SQLOK)
	{
		sprintf(tmp, "[%s] Failed [History cannot be updated (%s)]", msg->name, sqlca.sqlerrm.sqlerrmc);
		fbput(sndbuf, MESSAGE, tmp, 0);
		tpreturn( TPFAIL, 0, (char *)sndbuf, sizeof(sndbuf), 0 );
	}

	EXEC SQL AT :conn_name COMMIT WORK RELEASE;

	sprintf(tmp, "[%s] Success [%s's account has been credited with %d ($%d left over)]", msg->name, user_id, v, bal);
	fbput(sndbuf, MESSAGE, tmp, 0);

	tpreturn( TPSUCCESS, 0, (char *)sndbuf, sizeof(sndbuf), 0 );    
}

TRANSFER(TPSVCINFO *msg)
{
	int bal1, bal2, v;
	char tmp[128];
	char user_id[16];
	char rec_id[16];
	char my_bank[16];
	char rec_bank[16];
	char conn_name1[16];
	char conn_name2[16];
	char date[64];

	FBUF *rcvbuf, *sndbuf;
	rcvbuf=(FBUF *)tpalloc("FIELD", NULL, 0);
	sndbuf=(FBUF *)tpalloc("FIELD", NULL,0);

	fbget((FBUF *)(msg->data), MY_ID, user_id, 0);
	fbget((FBUF *)(msg->data), REC_ID, rec_id, 0);
	fbget((FBUF *)(msg->data), MY_BANK, my_bank, 0);
	fbget((FBUF *)(msg->data), REC_BANK, rec_bank, 0);
	fbget((FBUF *)(msg->data), AMOUNT, (char *)&v, 0);
	fbget((FBUF *)(msg->data), DATE, date, 0);

	access_account(msg, sndbuf, my_bank, conn_name1, user_id);

	EXEC SQL AT :conn_name1 SELECT BALANCE
	INTO	:bal1
	FROM	balance
	WHERE	ID =: user_id;

	if (bal1 < v)
	{
		sprintf(tmp, "[%s] Failed [%s's account cannot be overdrawn (current balance = %d)]", msg->name, user_id, bal1);
		fbput(sndbuf, MESSAGE, tmp, 0);
		tpreturn( TPFAIL, 0, (char *)sndbuf, sizeof(sndbuf), 0 );
	}

	bal1 -= v;

	EXEC SQL AT :conn_name1 UPDATE balance
	SET	BALANCE = :bal1
	WHERE   ID =: user_id;

	if (sqlca.sqlcode != SQLOK)
	{
		sprintf(tmp, "[%s] Failed [failed to update your account (%s)]", msg->name, sqlca.sqlerrm.sqlerrmc);
		fbput(sndbuf, MESSAGE, tmp, 0);
		tpreturn( TPFAIL, 0, (char *)sndbuf, sizeof(sndbuf), 0 );
	}

	EXEC SQL AT :conn_name1
	INSERT INTO history
	VALUES ('Transfer to', :user_id, :rec_id, :v, to_timestamp(:date, 'yyyy-mm-dd hh24:mi:ss'));

	if (sqlca.sqlcode != SQLOK)
	{
		sprintf(tmp, "[%s] Failed [History cannot be updated (%s)]", msg->name, sqlca.sqlerrm.sqlerrmc);
		fbput(sndbuf, MESSAGE, tmp, 0);
		tpreturn( TPFAIL, 0, (char *)sndbuf, sizeof(sndbuf), 0 );
	}

	if (strcmp(my_bank, rec_bank) != 0)
	{
		access_account(msg, sndbuf, rec_bank, conn_name2, rec_id);
	}
	else
	{
		strcpy(conn_name2, conn_name1);
	}

	EXEC SQL AT :conn_name2 SELECT BALANCE
	INTO	:bal2
	FROM	balance
	WHERE	ID =: rec_id;

	bal2 += v;

	EXEC SQL AT :conn_name2 UPDATE balance
	SET	BALANCE = :bal2
	WHERE   ID =: rec_id;

	if (sqlca.sqlcode != SQLOK)
	{
		sprintf(tmp, "[%s] Failed [failed to update recipient's account (%s)]", msg->name, sqlca.sqlerrm.sqlerrmc);
		fbput(sndbuf, MESSAGE, tmp, 0);
		tpreturn( TPFAIL, 0, (char *)sndbuf, sizeof(sndbuf), 0 );
	}

	EXEC SQL AT :conn_name2
	INSERT INTO history
	VALUES ('Transfer from', :rec_id, :user_id, :v, to_timestamp(:date, 'yyyy-mm-dd hh24:mi:ss'));

	if (sqlca.sqlcode != SQLOK)
	{
		sprintf(tmp, "[%s] Failed [History cannot be updated (%s)]", msg->name, sqlca.sqlerrm.sqlerrmc);
		fbput(sndbuf, MESSAGE, tmp, 0);
		tpreturn( TPFAIL, 0, (char *)sndbuf, sizeof(sndbuf), 0 );
	}

	EXEC SQL AT :conn_name1 COMMIT WORK RELEASE;

	if (strcmp(my_bank, rec_bank) != 0)
	{
		EXEC SQL AT :conn_name2 COMMIT WORK RELEASE;
	}

	sprintf(tmp, "[%s] Success [Send $%d to %s ($%d left over)]", msg->name, v, rec_id, bal1);
	fbput(sndbuf, MESSAGE, tmp, 0);

	tpreturn( TPSUCCESS, 0, (char *)sndbuf, sizeof(sndbuf), 0 );
}

BALANCE(TPSVCINFO *msg)
{
	int ret;
	int bal;
	char tmp[128];
	char user_id[16];
	char my_bank[16];
	char conn_name[16];

	FBUF *rcvbuf, *sndbuf;
	rcvbuf=(FBUF *)tpalloc("FIELD", NULL, 0);
	sndbuf=(FBUF *)tpalloc("FIELD", NULL, 0);

	fbget((FBUF *)(msg->data), MY_ID, user_id, 0);
	fbget((FBUF *)(msg->data), MY_BANK, my_bank, 0);

	access_account(msg, sndbuf, my_bank, conn_name, user_id);

	EXEC SQL AT :conn_name SELECT BALANCE
	INTO	:bal
	FROM	balance
	WHERE	ID =: user_id;

	sprintf(tmp, "[%s] Success [%s's account has %d]", msg->name, user_id, bal);
	fbput(sndbuf, MESSAGE, tmp, 0);

	tpreturn( TPSUCCESS, 0, (char *)sndbuf, sizeof(sndbuf), 0 );
}

HISTORY(TPSVCINFO *msg)
{
	char tmp[MAXLEN];
	char user_id[16];
	char my_bank[16];
	char conn_name[16];

	FBUF *rcvbuf, *sndbuf;
	rcvbuf=(FBUF *)tpalloc("FIELD", NULL, 0);
	sndbuf=(FBUF *)tpalloc("FIELD", NULL, 0);

	fbget((FBUF *)(msg->data), MY_ID, user_id, 0);
	fbget((FBUF *)(msg->data), MY_BANK, my_bank, 0);

	access_account(msg, sndbuf, my_bank, conn_name, user_id);

	EXEC SQL AT :conn_name DECLARE his_cursor CURSOR FOR
	SELECT DETAIL, RXID, AMOUNT, TM
	FROM	history
	WHERE	ID =: user_id;

	EXEC SQL OPEN his_cursor;

	if (sqlca.sqlcode != SQLOK)
	{
		sprintf(tmp, "[%s] Failed [cursor oepn error (%s)]", msg->name, sqlca.sqlerrm.sqlerrmc);
		fbput(sndbuf, MESSAGE, tmp, 0);
		tpreturn( TPFAIL, 0, (char *)sndbuf, sizeof(sndbuf), 0 );
	}

	char details[14], rxid[18], date[32], amount[16];
	char *his = malloc(MAXLEN);
	int a;

	sprintf(his, "|        Date         |    Details    |   Amount   |    Counterpart    |\n"
				 "------------------------------------------------------------------------\n");

	while(1)
	{
		EXEC SQL FETCH his_cursor 
		INTO :details, :rxid, :a, :date;

		if(sqlca.sqlcode != SQLOK)
		{
			if(sqlca.sqlcode == 1403) 
			{ 
				break; 
			} 
			else 
			{ 
				sprintf(tmp, "[%s] Failed [failed to read outputs (%s)]", msg->name, sqlca.sqlerrm.sqlerrmc);
				fbput(sndbuf, MESSAGE, tmp, 0);
				tpreturn( TPFAIL, 0, (char *)sndbuf, sizeof(sndbuf), 0 );
			}
		}

		date[19] = '\0';

		sprintf(his+strlen(his), "| %s | %s | %10d | %s |\n", date, details, a, rxid);
	}

	sprintf(his+strlen(his), "------------------------------------------------------------------------\n");

	EXEC SQL AT :conn_name COMMIT WORK RELEASE;

	sprintf(tmp, "[%s] Success\n%s", msg->name, his);
	fbput(sndbuf, MESSAGE, tmp, 0);

	free(his);

	tpreturn( TPSUCCESS, 0, (char *)sndbuf, sizeof(sndbuf), 0 );
}
